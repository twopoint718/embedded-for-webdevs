# About this Book

I've worked professionally as a web application developer, mostly in Rails since at least 2011.
But even before that, I'd been messing around with computer programs for a long time.
Really dating myself here, but I had one of those heavy green "Learn JavaScript in 21 Days" books that my dad got me back in the 90s.
My web browser came on diskettes in a box.
But I digress.
Suffice it to say that I've been hitting /view source/ since it was an option.

The web is great.
It is a mostly-open platform moored to robust backwards compatibility by the massive chain of user adoption.
There's great support because we all agree that web pages should continue to work even long after they're written.
Making custom web applications, brochure sites, customized templates, etc. etc. are all viable job activities.
And it is reasonably accessible to the newcomer.
After all, most everyone knows what a webapp is and how they interact with them.

But as great as the web is, it's not the whole story.
The farther along in my career I got, the more that I started to think about what's /underneath/.
I have a good grounding in UNIX and so I knew about things like sockets and HTTP.
But I never felt like I had a good grasp on what happens between data being a packet and it being electrical signals in a wire.
The physics part of my brain couldn't see how everything fit together.

## TODO: more stuff & rationale

This book is a start-to-finish project that I really did.
Throughout the step-by-step process of building this device, we'll learn all about what embedded entails.
But I also love the physical design of things.
In addition to writing the firmware for the device, we'll also:

- create a custom PCB
- source parts and assemble them
- program the board
- design & 3d print a case

I want to go through each step of what you'd do if you wanted to start making electronics projects.

- Why C?
  - A "Lingua Franca" for Embedded
  - Libraries, Tooling, IDEs
- Why Rust?
  - Modernity comes to Embedded
  - ...Not Equally Distributed
  - Achieveable
- Project-Based
  - No "Solutions in Search of a Problem"
  - I'm Learning, Too!
